{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "String",
      "metadata": {
        "description": "The location of the Storm cluster to create."
      }
    },
    "clusterName": {
      "type": "String",
      "metadata": {
        "description": "The name of the Storm cluster to create."
      }
    },
    "adminUsername": {
      "defaultValue": "platform",
      "type": "String",
      "metadata": {
        "description": "These credentials can be used to submit jobs to the cluster and to log into cluster dashboards."
      }
    },
    "adminPublicKey": {
      "type": "String",
      "metadata": {
        "description": "Public key that will be allowed to login. If you want multiple people to be able to login, newline separated public keys. Holders of the the corresponding private keys will allowed to login. Password login will not be allowed."
      }
    },
    "ubuntuOSVersion": {
      "type": "String",
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
    "existingVNETRGName": {
      "type": "String",
      "metadata": {
        "description": "Name of the resource group in which vnet exists"
      }
    },
    "existingVNETName": {
      "type": "String",
      "metadata": {
        "description": "Name of the Existing VNET in which cluster is to be created."
      }
    },
    "existingSubnetName": {
      "defaultValue": "default",
      "type": "String",
      "metadata": {
        "description": "Subnet to use for this cluster. Subnet should be part of the above vnet."
      }
    },
    "azureFsProtocol": {
      "defaultValue": "wasbs",
      "type": "String",
      "metadata": {
        "description": "The Azure FS protocol: wasb/wasbs."
      }
    },
    "azureBlobResourceGroup": {
      "type": "String",
      "metadata": {
        "description": "The Resource group to which the storage account belongs to."
      }
    },
    "azureBlobEndpoint": {
      "type": "String",
      "metadata": {
        "description": "The Azure blob endpoint."
      }
    },
    "azureFsKey": {
      "type": "String",
      "metadata": {
        "description": "The key of the default storage account."
      }
    },
    "azureBlobContainer": {
      "type": "String",
      "metadata": {
        "description": "The name of the existing Azure blob storage container."
      }
    },
    "dockerRegistryUrl": {
      "defaultValue": "docker.io",
      "type": "String",
      "metadata": {
        "description": "If deploying via docker, The registry url."
      }
    },
    "dockerRegistryUsername": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "If deploying via docker, Username to connect to docker registry."
      }
    },
    "dockerRegistryPassword": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "If deploying via docker, Password to connect to docker registry."
      }
    },
    "autoScaleEnabled": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "Enable Autoscale for Worker Nodes?"
      }
    },
    "graphiteHost": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Graphite endpoint host name (optional)"
      }
    },
    "graphitePort": {
      "defaultValue": 2003,
      "type": "Int",
      "metadata": {
        "description": "Graphite endpoint port (optional)"
      }
    },
    "keyVaultName": {
      "type": "String",
      "metadata": {
        "description": "Name of the key vault"
      }
    },
    "environmentName": {
      "defaultValue": "test",
      "allowedValues": ["test", "prod"],
      "type": "String",
      "metadata": {
        "description": "Deployment environment."
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "subnetName": "[parameters('existingSubnetName')]",
    "vmName": "MyUbuntuVM",
    "nimbusVMName": "[concat(parameters('clusterName'),'-nimbus')]",
    "nimbusNicName": "[concat(variables('nimbusVMName'),'-nic')]",
    "nimbusIPConfigName": "[concat(variables('nimbusVMName'), '-ipconfig')]",
    "zookeeperVMName": "[concat(parameters('clusterName'),'-zookeeper')]",
    "zookeeperNicName": "[concat(variables('zookeeperVMName'),'-nic')]",
    "zookeeperIPConfigName": "[concat(variables('zookeeperVMName'), '-ipconfig')]",
    "dockerImagesToRunOnFalconVM": "oozie falcon",
    "gatewayVMName": "[concat(parameters('clusterName'),'-gateway')]",
    "gatewayNicName": "[concat(variables('gatewayVMName'),'-nic')]",
    "gatewayIPConfigName": "[concat(variables('gatewayVMName'), '-ipconfig')]",
    "virtualNetworkName": "[parameters('existingVNETName')]",
    "vnetID": "[resourceId(parameters('existingVNETRGName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "storageAccountType": "Standard_LRS",
    "osType": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[parameters('ubuntuOSVersion')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "supervisorVMName": "[concat(parameters('clusterName'), '-supervisor')]",
    "supervisorNicName": "[concat(variables('supervisorVMName'),'-nic')]",
    "supervisorIPConfigName": "[concat(variables('supervisorVMName'), '-ipconfig')]",
    "supervisorVMAutoscaleName": "[concat(variables('supervisorVMName'), '-autoscale')]",
    "aadLoginExtensionName": "AADLoginForLinux",
    "msiExtensionName": "ManagedIdentityExtensionForLinux",
    "diskSizeGB": "30",
    "apiVersion": {
      "for": {
        "nic": "2018-02-01",
        "vm": "2017-12-01",
        "vmss": "2017-12-01",
        "autoscaleSettings": "2015-04-01",
        "msiExtension": "2017-12-01",
        "customScriptExtension": "2017-12-01",
        "aadExtension": "2017-12-01"
      }
    },
    "environmentSettings": {
      "test": {
        "nimbusVMSku": "Standard_D2_v3",
        "supervisorVMSSSku": "Standard_D2_v3",
        "numberOfSupervisors": 1,
        "zookeeperVMSku": "Standard_D2_v3",
        "gatewayVMSku": "Standard_A1_v2"
      },
      "prod": {
        "nimbusVMSku": "Standard_D2_v3",
        "supervisorVMSSSku": "Standard_D4_v3",
        "numberOfSupervisors": 5,
        "zookeeperVMSku": "Standard_D2_v3",
        "gatewayVMSku": "Standard_A2_v2"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nimbusNicName')]",
      "apiVersion": "[variables('apiVersion').for.nic]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('nimbusIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('nimbusVMName')]",
      "apiVersion": "[variables('apiVersion').for.vm]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "systemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('environmentSettings')[parameters('environmentName')].nimbusVMSku]"
        },
        "osProfile": {
          "computerName": "[variables('nimbusVMName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('adminPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "diskSizeGB": "[variables('diskSizeGB')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nimbusNicName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nimbusNicName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('nimbusVMName'), '/', 'yarn-install-and-start-script')]",
      "apiVersion": "[variables('apiVersion').for.customScriptExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "http://raw.githubusercontent.com/prongs/yarn-azure/master/bootstrap.sh"
          ],
          "commandToExecute": "[concat('bash -x bootstrap.sh ', 'docker', ' resourcemanager HOSTNAME=', reference(resourceId('Microsoft.Network/networkInterfaces',variables('yarnNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress, ' AZURE_BLOB_CONTAINER=', parameters('azureBlobContainer'), ' AZURE_BLOB_ENDPOINT=', parameters('azureBlobEndpoint'), ' AZURE_FS_PROTOCOL=', parameters('azureFsProtocol'), ' AZURE_FS_KEY=', parameters('azureFsKey'), ' GRAPHITE_HOST=', parameters('graphiteHost'), ' GRAPHITE_PORT=', parameters('graphitePort'), ' DOCKER_REGISTRY_URL=', parameters('dockerRegistryUrl'), ' DOCKER_REGISTRY_USERNAME=', parameters('dockerRegistryUsername'), ' DOCKER_REGISTRY_PASSWORD=', parameters('dockerRegistryPassword'))]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('nimbusVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('nimbusVMName'),'/', variables('msiExtensionName'))]",
      "apiVersion": "[variables('apiVersion').for.msiExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.ManagedIdentity",
        "type": "ManagedIdentityExtensionForLinux",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "port": 50342
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('nimbusVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "name": "[variables('environmentSettings')[parameters('environmentName')].supervisorVMSSSku]",
        "tier": "Standard",
        "capacity": "[variables('environmentSettings')[parameters('environmentName')].numberOfSupervisors]"
      },
      "name": "[variables('supervisorVMName')]",
      "apiVersion": "[variables('apiVersion').for.vmss]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "systemAssigned"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage"
            },
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "16.04-LTS",
              "version": "latest"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('supervisorVMName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('adminPublicKey')]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('supervisorNicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('supervisorIPConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "runSupervisor",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "http://raw.githubusercontent.com/prongs/yarn-azure/master/bootstrap.sh"
                    ],
                    "commandToExecute": "[concat('bash -x bootstrap.sh ', 'docker', ' supervisor NODE_HOSTNAME=0.0.0.0 YARN_HOSTNAME=', reference(resourceId('Microsoft.Network/networkInterfaces',variables('yarnNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress, ' AZURE_BLOB_CONTAINER=', parameters('azureBlobContainer'), ' AZURE_BLOB_ENDPOINT=', parameters('azureBlobEndpoint'), ' AZURE_FS_PROTOCOL=', parameters('azureFsProtocol'), ' AZURE_FS_KEY=', parameters('azureFsKey'), ' GRAPHITE_HOST=', parameters('graphiteHost'), ' GRAPHITE_PORT=', parameters('graphitePort'), ' DOCKER_REGISTRY_URL=', parameters('dockerRegistryUrl'), ' DOCKER_REGISTRY_USERNAME=', parameters('dockerRegistryUsername'), ' DOCKER_REGISTRY_PASSWORD=', parameters('dockerRegistryPassword'))]"
                  }
                }
              },
              {
                "name": "msi",
                "location": "[parameters('location')]",
                "properties": {
                  "publisher": "Microsoft.ManagedIdentity",
                  "type": "[variables('msiExtensionName')]",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "port": 50342
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "name": "[variables('supervisorVMAutoscaleName')]",
      "apiVersion": "[variables('apiVersion').for.autoscaleSettings]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('supervisorVMAutoscaleName')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('supervisorVMName'))]",
        "enabled": "[parameters('autoScaleEnabled')]",
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "1",
              "maximum": "10",
              "default": "1"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('supervisorVMName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 60
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('supervisorVMName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 30
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('supervisorVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('zookeeperNicName')]",
      "apiVersion": "[variables('apiVersion').for.nic]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('zookeeperIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('zookeeperVMName')]",
      "apiVersion": "[variables('apiVersion').for.vm]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "systemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('environmentSettings')[parameters('environmentName')].zookeeperVMSku]"
        },
        "osProfile": {
          "computerName": "[variables('zookeeperVMName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('adminPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "diskSizeGB": "[variables('diskSizeGB')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('zookeeperNicName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('zookeeperNicName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('zookeeperVMName'), '/', 'zookeeper-install-and-start-script')]",
      "apiVersion": "[variables('apiVersion').for.customScriptExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/theabhishek-tripathi/azure-quickstart-templates/master/zookeeper-cluster-ubuntu-vm/zookeeper.sh"
          ],
          "commandToExecute": "[concat('bash zookeeper.sh 1 ', reference(resourceId('Microsoft.Network/networkInterfaces',variables('zookeeperNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress)]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('zookeeperVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('zookeeperVMName'),'/', variables('msiExtensionName'))]",
      "apiVersion": "[variables('apiVersion').for.msiExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.ManagedIdentity",
        "type": "ManagedIdentityExtensionForLinux",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "port": 50342
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('zookeeperVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('gatewayNicName')]",
      "apiVersion": "[variables('apiVersion').for.nic]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('gatewayIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('gatewayVMName')]",
      "apiVersion": "[variables('apiVersion').for.vm]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "systemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('environmentSettings')[parameters('environmentName')].gatewayVMSku]"
        },
        "osProfile": {
          "computerName": "[variables('gatewayVMName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('adminPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "diskSizeGB": "[variables('diskSizeGB')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('gatewayNicName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('gatewayNicName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('gatewayVMName'), '/', 'gateway-install-and-start-script')]",
      "apiVersion": "[variables('apiVersion').for.customScriptExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "http://raw.githubusercontent.com/prongs/yarn-azure/master/bootstrap.sh"
          ],
          "commandToExecute": "[concat('bash -x bootstrap.sh docker gateway ', ' KEY_VAULT_NAME=', parameters('keyVaultName'), ' AZURE_BLOB_CONTAINER=', parameters('azureBlobContainer'), ' AZURE_BLOB_ENDPOINT=', parameters('azureBlobEndpoint'), ' AZURE_FS_PROTOCOL=', parameters('azureFsProtocol'), ' AZURE_FS_KEY=', parameters('azureFsKey'), ' DOCKER_REGISTRY_URL=', parameters('dockerRegistryUrl'), ' DOCKER_REGISTRY_USERNAME=', parameters('dockerRegistryUsername'), ' DOCKER_REGISTRY_PASSWORD=', parameters('dockerRegistryPassword'), ' YARN_HOSTNAME=', reference(resourceId('Microsoft.Network/networkInterfaces',variables('yarnNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress, ' OOZIE_URL=http://', reference(resourceId('Microsoft.Network/networkInterfaces',variables('falconNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress, ':11000/oozie', ' FALCON_URL=https://', reference(resourceId('Microsoft.Network/networkInterfaces',variables('falconNicName')),providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]).ipConfigurations[0].properties.privateIPAddress, ':16443/ ')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('gatewayVMName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('gatewayVMName'),'/', variables('msiExtensionName'))]",
      "apiVersion": "[variables('apiVersion').for.msiExtension]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.ManagedIdentity",
        "type": "ManagedIdentityExtensionForLinux",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "port": 50342
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('gatewayVMName'))]"
      ]
    }
  ],
  "outputs": {
    "nimbus": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualMachines',variables('nimbusVMName'))]"
    },
    "zookeeperMachine": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualMachines',variables('zookeeperVMName'))]"
    },
    "gatewayMachine": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualMachines',variables('gatewayVMName'))]"
    }
  }
}
